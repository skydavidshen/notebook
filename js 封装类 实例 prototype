
study link : http://gengshu.net/2012/02/05/javascript_oop/



=================================== example 1 ===================================

/*封装主要用意在于将实现细节隐藏，提供给客户端的只是定义良好的接口，在js中的封装同其它语言中的封装并无差异，
最为简单的封装就是通过function 函数初始化类。*/

function CreatePerson(name,sex,birthday)  
{  
  this.name = name;
  this.sex = sex;
  this.birthday = birthday;
  
  this.showMe = function(){
	  alert("my name is "+this.name+" \n sex is :"+this.sex+"\n birthday is:"+this.birthday);
  }
}  

//js中函数本身就是类，我们可以通过Shape函数的prototype属性为该类添加方法,如下所示

CreatePerson.prototype ={
	sayHi:function(){
		alert("hi , my name is "+this.name);
	},
	walk:function(){
		alert(this.name+" is walking now");
	}
}

//那么我们多创建几个人的话，就可以  
var person1 = new CreatePerson('zs','boy','2001-02-03');  
var person2 = new CreatePerson('ls','boy','2001-02-04');  
person1.showMe();

person1.walk();
person2.sayHi(); 

=================================== example 2 ===================================

function Shape(){
	this.init = function(param1,param2){
	 this.param1 = param1;
	 this.param2 = param2;
	}
}

Shape.prototype = {
    method1:function(){alert(this.param1)},
    method2:function(){alert(this.param2)}
}

var shape = new Shape();
shape.init('method1','method2');
shape.method1();
shape.method2();

// 在js中并无继承机制，但可以通过将prototype中保存的变量逐一复制也可实现类似java语言中的继承，如下所示：
Object.extend = function(destination, source) {
      // 值得注意的是：Shape类的 param1，param2 这两个属性也被copy到Square类中去了
      for (var property in source){
        destination[property] = source[property];
      }  
      return destination;
};

function Square(){
   /*code here */
}
   
Square.prototype = Object.extend(new Shape(),{method3:function(){alert('square')}});

// 值得注意的是：Shape类的 param1，param2 这两个属性也被copy到Square类中去了
var square = new Square();
square.init('square method1','square method2');
square.method1();
square.method2();
square.method3();

=================================== example 3 ===================================

function DemoA() {
  this.name = "DemoA";
}
function DemoB() { }

//子类.prototype = new 父类;//注意：父类后不能传参数
DemoB.prototype = new DemoA(); //DemoB继承了DemoA
var b = new DemoB();
alert(b.name);

=================================== example 4  the better ===================================

function C(name,sex){
	this.name = name;
	this.sex = sex;
	//虽然这样写是可以的,但是方法不应该写在构造函数里面，他是公用的，所以，更好的解决办法采用prototype原型方式
	/*
	this.showMe = function(){
		alert("my name is : "+this.name+" and my sex is : "+this.sex);
	}
	*/
}

C.prototype = {
	look:function(){
		alert(this.name+" is looking tv");
	},
	play:function(){
		alert(this.name+" is playing");
	},
	showMe:function(){
		alert("my name is : "+this.name+" and my sex is : "+this.sex);	
	}
};

function D(name,sex){
	C.call(this,name,sex);
} 

/*

call([thisObj[,arg1[, arg2[, [,.argN]]]]])

参数:
thisObj 可选项。将被用作当前对象的对象。
arg1, arg2, , argN 可选项。将被传递方法参数序列。

说明: call 方法可以用来代替另一个对象调用一个方法。call 方法可将一个函数的对象上下文从初始的上下文改变为由 thisObj 指
定的新对象。

eg: C.call(this,name,sex,age,job);
*/

D.prototype = new C();

D.prototype.play = function(){
	alert(this.name + " is play game");
}

/*
// 下面这种写法 会覆盖掉之前 从C类中继承的方法属性  因为  D.prototype = { code } 这个相当于重新赋值方法了
D.prototype = {
	play:function(){
		alert(this.name + " is play game");
	}	
}
*/

var d = new D("dog","man");
d.look();
d.showMe();
d.play();

=================================== example 5  进化 ===================================

var Class={
 create:function(){
     return function(){
         this.inital.apply(this,arguments);
     };
 }
};
/*定义User类*/
var User=Class.create();
win[´OOP´][´User´]=User;
User.prototype={
 inital:function(userid,uname,uage,uscore){
     this._userid=userid;
     this._name=uname;
     this._age=uage;
     this._score=uscore;
 },
 downloadResource:function(){
     return "User类：下载资源";
 },
 shareResource:function(){
     this._score+=5;
     return "User类：分享资源";
 },
 showInfo:function(){
         var str_tmp="";
         str_tmp+="userid:"+this._userid+"<br/>";
         str_tmp+="name:"+this._name+"<br/>";
         str_tmp+="age:"+this._age+"<br/>";
         str_tmp+="score:"+this._score+"<br/>";
         return str_tmp;
 }
};

关键代码在于：this.inital.apply(this,arguments);这样一行，Class本身是一个对象，他有一个方法叫做create，此方法返回一个函数

指针，其中函数体内执行this.inital.apply(this,arguments);this指向是的是当前对象，在这里就是User，apply方法是更改initial方

法的作用域，arguments是参数列表。也许有人还是迷迷糊糊的，那暂且先记住当new一个对象的时候，initial方法就会执行。类已经定义

好了，我们可以像java、c#一样去实例化对象。



=================================== example 6  传统普通 封装 继承 多态 ===================================

/*
* OOP javascript demo
* namespace OOP
* developing tools UltraEdit
* author 李检全
* email lijianquan07@gmail.com
* qq 55643287
* date 2012-02-05
*/
(function(win){
	if(!win[´OOP´])
		win[´OOP´]={};

	//申明User类，其中users为一个数组，数组中的数据是单个user的信息
	function User(userid,uname,uage,uscore){
		this._userid=userid;
		this._name=uname;
		this._age=uage;
		this._score=uscore;
	}
	/*对User类添加引用*/
	win[´OOP´][´User´]=User;
	//添加public 方法
	/*用户下载资源*/
	User.prototype.downloadResource=function(){
		return "User类：下载资源";
	};
	//添加public 方法
	/*分享资源（abstract或者virtual方法）*/
	User.prototype.shareResource=function(user){
		this._score+=5;
		return "User类：分享资源";
	};
	//添加public方法
	/*显示用户信息（abstract或者virtual方法）*/
	User.prototype.showInfo=function(){
		var str_tmp="";
		str_tmp+="userid:"+this._userid+"<br/>";
		str_tmp+="name:"+this._name+"<br/>";
		str_tmp+="age:"+this._age+"<br/>";
		str_tmp+="score:"+this._score+"<br/>";
		return str_tmp;
	};
	//定义会员类
	function Member(userid,uname,uage,uscore,offlineSpace,level){
		this._offlineSpace=offlineSpace;
		this._level=level;
		/*初始化基类参数*/
		User.call(this,userid,uname,uage,uscore);
	}
	win[´OOP´][´Member´]=Member;
	/*更改Member的prototype属性，以实现继承*/
	Member.prototype=new User();
	//添加public 方法
	//会员类有权限使用云点播
	Member.prototype.cloudPlay=function(){
		return "Member类：云点播";
	};
	//添加public 方法
	//会员类有权限使用离线下载
	Member.prototype.offlineDownload=function(){
		return "Member类：离线下载";
	};
	//相当于override abstract(或virtual)方法
	/*重写基类分享资源方法，假设计算积分方式不一样*/
	Member.prototype.shareResource=function(){
		this._score+=10;
		return "Member类：分享资源";
	};
	//相当于override abstract(或virtual)方法
	/*重写显示用户信息方法*/
	Member.prototype.showInfo=function(){
		var str_tmp="";
		str_tmp+="userid:"+this._userid+"<br/>";
		str_tmp+="name:"+this._name+"<br/>";
		str_tmp+="age:"+this._age+"<br/>";
		str_tmp+="score:"+this._score+"<br/>";
		str_tmp+="offline Space:"+this._offlineSpace+"<br/>";
		str_tmp+="level:"+this._level+"<br/>";
		return str_tmp;
	};
	/*使用场景函数*/
	function main(){
	  var user=new User(´10000´,´david´,24,1000);
		var arr_tmp=new Array();
		arr_tmp.push("clas User");
		arr_tmp.push("===================================================");
		arr_tmp.push(user.showInfo());
		arr_tmp.push(user.downloadResource());
		arr_tmp.push(user.shareResource());
		arr_tmp.push("===================================================<br/><br/>");

		var member=new Member(´10001´,´beckham´,24,9000,"100Gb","十级");
		arr_tmp.push("class Member");
		arr_tmp.push("===================================================");
		arr_tmp.push(member.showInfo());
		arr_tmp.push(member.downloadResource());
		arr_tmp.push(member.cloudPlay());
		arr_tmp.push(member.offlineDownload());
		arr_tmp.push(member.shareResource());
		arr_tmp.push("===================================================");
		var tar_obj=document.getElementById("wrap");
		tar_obj.innerHTML=arr_tmp.join(´<br/>´);
	}
	win[´OOP´][´main´]=main;
	//执行结果
	window.onload=function(){
		main();
	};

})(window);


=================================== example 7  优雅方式（可以慢慢研究） 封装 继承 多态 ===================================

/*
* OOP javascript demo
* namespace OOP
* developing tools UltraEdit
* author 李检全
* email lijianquan07@gmail.com
* qq 55643287
* date 2012-02-05
*/
/*
============================================================
	注释请看OOP1.src.js，注释就不重写了。
============================================================
*/
(function(win){
	if(!win[´OOP´])
		win[´OOP´]={};
	var Class={
		create:function(){
			return function(){
				this.inital.apply(this,arguments);
			};
		}
	};
	/*定义User类*/
	var User=Class.create();
	win[´OOP´][´User´]=User;
	User.prototype={
		inital:function(userid,uname,uage,uscore){
			this._userid=userid;
			this._name=uname;
			this._age=uage;
			this._score=uscore;
		},
		downloadResource:function(){
			return "User类：下载资源";
		},
		shareResource:function(){
			this._score+=5;
			return "User类：分享资源";
		},
		showInfo:function(){
				var str_tmp="";
				str_tmp+="userid:"+this._userid+"<br/>";
				str_tmp+="name:"+this._name+"<br/>";
				str_tmp+="age:"+this._age+"<br/>";
				str_tmp+="score:"+this._score+"<br/>";
				return str_tmp;
		}
	};
	/*定义Member类*/
	var Member=Class.create();
	win[´OOP´][´Member´]=Member;
	var repeater=new User();
	Object.prototype.extend=function(obj){
		for(var item in obj){
			this[item]=obj[item];
		}
	};
	var fn={
		inital:function(userid,uname,uage,uscore,offlineSpace,level){
					this._offlineSpace=offlineSpace;
					this._level=level;
					/*初始化基类参数*/
					User.prototype.inital.call(this,userid,uname,uage,uscore);
		},
		cloudPlay:function(){
			return "Member类：云点播";
		},
		offlineDownload:function(){
			return "Member类：离线下载";
		},
		shareResource:function(){
			this._score+=10;
			return "Member类：分享资源";
		},
		showInfo:function(){
			var str_tmp="";
			str_tmp+="userid:"+this._userid+"<br/>";
			str_tmp+="name:"+this._name+"<br/>";
			str_tmp+="age:"+this._age+"<br/>";
			str_tmp+="score:"+this._score+"<br/>";
			str_tmp+="offline Space:"+this._offlineSpace+"<br/>";
			str_tmp+="level:"+this._level+"<br/>";
			return str_tmp;
		}
	};
	repeater.extend(fn);
	Member.prototype=repeater;
	function main(){
	  var user=new User(´10000´,´david´,24,1000);
		var arr_tmp=new Array();
		arr_tmp.push("clas User");
		arr_tmp.push("===================================================");
		arr_tmp.push(user.showInfo());
		arr_tmp.push(user.downloadResource());
		arr_tmp.push(user.shareResource());
		arr_tmp.push("===================================================<br/><br/>");

		var member=new Member(´10001´,´beckham´,24,9000,"100Gb","十级");
		arr_tmp.push("class Member");
		arr_tmp.push("===================================================");
		arr_tmp.push(member.showInfo());
		arr_tmp.push(member.downloadResource());
		arr_tmp.push(member.cloudPlay());
		arr_tmp.push(member.offlineDownload());
		arr_tmp.push(member.shareResource());
		arr_tmp.push("===================================================");
		var tar_obj=document.getElementById("wrap");
		tar_obj.innerHTML=arr_tmp.join(´<br/>´);
	}
	win[´OOP´][´main´]=main;
	//执行结果
	window.onload=function(){
		main();
	};

})(window);

