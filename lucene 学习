索引和搜索

索引是现代搜索引擎的核心，建立索引的过程就是把源数据处理成非常方便查询的索引文件的过程。为什么索引这么重要呢，试想你现在
要在大量的文档中搜索含有某个关键词的文档，那么如果不建立索引的话你就需要把这些文档顺序的读入内存，然后检查这个文章中是不
是含有要查找的关键词，这样的话就会耗费非常多的时间，想想搜索引擎可是在毫秒级的时间内查找出要搜索的结果的。这就是由于建立
了索引的原因，你可以把索引想象成这样一种数据结构，他能够使你快速的随机访问存储在索引中的关键词，进而找到该关键词所关联的
文档。Lucene 采用的是一种称为反向索引（inverted index）的机制。反向索引就是说我们维护了一个词 / 短语表，对于这个表中的每
个词 / 短语，都有一个链表描述了有哪些文档包含了这个词 / 短语。这样在用户输入查询条件的时候，就能非常快的得到搜索结果。我
们将在本系列文章的第二部分详细介绍 Lucene 的索引机制，由于 Lucene 提供了简单易用的 API，所以即使读者刚开始对全文本进行索
引的机制并不太了解，也可以非常容易的使用 Lucene 对你的文档实现索引。

对文档建立好索引后，就可以在这些索引上面进行搜索了。搜索引擎首先会对搜索的关键词进行解析，然后再在建立好的索引上面进行查
找，最终返回和用户输入的关键词相关联的文档。


建立索引

为了对文档进行索引，Lucene 提供了五个基础的类，他们分别是 Document, Field, IndexWriter, Analyzer, Directory。下面我们分别
介绍一下这五个类的用途：


Document

Document 是用来描述文档的，这里的文档可以指一个 HTML 页面，一封电子邮件，或者是一个文本文件。一个 Document 对象由多个 Field
对象组成的。可以把一个 Document 对象想象成数据库中的一个记录，而每个 Field 对象就是记录的一个字段。


Field

Field 对象是用来描述一个文档的某个属性的，比如一封电子邮件的标题和内容可以用两个 Field 对象分别描述。

Field有两个属性可选：存储和索引。通过存储属性你可以控制是否对这个Field进行存储；通过索引属性你可以控制是否对该Field进行
索引。这看起来似乎有些废话，事实上对这两个属性的正确组合很重要。
Field.Index             Field.Store       说明
TOKENIZED(分词)   YES                   被分词索引且存储
TOKENIZED             NO                   被分词索引但不存储
NO                         YES                   这是不能被搜索的，它只是被搜索内容的附属物。如URL等
UN_TOKENIZED     YES/NO             不被分词，它作为一个整体被搜索,搜一部分是搜不出来的
NO                         NO                   没有这种用法

如果要对某Field进行查找，那么一定要把Field.Index设置为TOKENIZED或UN_TOKENIZED。TOKENIZED会对Field的内容进行分词；而
UN_TOKENIZED不会，只有全词匹配，该Field才会被选中。
如果Field.Store是No，那么就无法在搜索结果中从索引数据直接提取该域的值，会使null。



Analyzer

在一个文档被索引之前，首先需要对文档内容进行分词处理，这部分工作就是由 Analyzer 来做的。Analyzer 类是一个抽象类，它有多个
实现。针对不同的语言和应用需要选择适合的 Analyzer。Analyzer 把分词后的内容交给 IndexWriter 来建立索引。

IndexWriter

IndexWriter 是 Lucene 用来创建索引的一个核心的类，他的作用是把一个个的 Document 对象加到索引中来。

Directory

这个类代表了 Lucene 的索引的存储的位置，这是一个抽象类，它目前有两个实现，第一个是 FSDirectory，它表示一个存储在文件系统
中的索引的位置。第二个是 RAMDirectory，它表示一个存储在内存当中的索引的位置。

熟悉了建立索引所需要的这些类后，我们就开始对某个目录下面的文本文件建立索引了，清单 1 给出了对某个目录下的文本文件建立索引的
源代码。



++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

1 lucene简介
1.1 什么是lucene
    Lucene是一个全文搜索框架，而不是应用产品。因此它并不像www.baidu.com 或者google Desktop那么拿来就能用，它只是提供了一
    种工具让你能实现这些产品。
2 lucene的工作方式
    lucene提供的服务实际包含两部分：一入一出。所谓入是写入，即将你提供的源（本质是字符串）写入索引或者将其从索引中删除；
    所谓出是读出，即向用户提供全文搜索服务，让用户可以通过关键词定位源。
2.1写入流程
    源字符串首先经过analyzer处理，包括：分词，分成一个个单词；去除stopword（可选）。
将源中需要的信息加入Document的各个Field中，并把需要索引的Field索引起来，把需要存储的Field存储起来。
    将索引写入存储器，存储器可以是内存或磁盘。
2.2读出流程
    用户提供搜索关键词，经过analyzer处理。
对处理后的关键词搜索索引找出对应的Document。
用户根据需要从找到的Document中提取需要的Field。
3 一些需要知道的概念
3.1 analyzer
    Analyzer是分析器，它的作用是把一个字符串按某种规则划分成一个个词语，并去除其中的无效词语，这里说的无效词语是指英文中
    的“of”、“the”，中文中的“的”、“地”等词语，这些词语在文章中大量出现，但是本身不包含什么关键信息，去掉有利于缩小索引文
    件、提高效率、提高命中率。
　　分词的规则千变万化，但目的只有一个：按语义划分。这点在英文中比较容易实现，因为英文本身就是以单词为单位的，已经用空格
　　分开；而中文则必须以某种方法将连成一片的句子划分成一个个词语。具体划分方法下面再详细介绍，这里只需了解分析器的概念即
　　可。
3.2 document
　　用户提供的源是一条条记录，它们可以是文本文件、字符串或者数据库表的一条记录等等。一条记录经过索引之后，就是以一个
　　Document的形式存储在索引文件中的。用户进行搜索，也是以Document列表的形式返回。
3.3 field
    一个Document可以包含多个信息域，例如一篇文章可以包含“标题”、“正文”、“最后修改时间”等信息域，这些信息域就是通过Field
    在Document中存储的。
    Field有两个属性可选：存储和索引。通过存储属性你可以控制是否对这个Field进行存储；通过索引属性你可以控制是否对该Field
    进行索引。这看起来似乎有些废话，事实上对这两个属性的正确组合很重要，下面举例说明：还是以刚才的文章为例子，我们需要对
    标题和正文进行全文搜索，所以我们要把索引属性设置为真，同时我们希望能直接从搜索结果中提取文章标题，所以我们把标题域的
    存储属性设置为真，但是由于正文域太大了，我们为了缩小索引文件大小，将正文域的存储属性设置为假，当需要时再直接读取文件
    ；我们只是希望能从搜索解果中提取最后修改时间，不需要对它进行搜索，所以我们把最后修改时间域的存储属性设置为真，索引
    属性设置为假。上面的三个域涵盖了两个属性的三种组合，还有一种全为假的没有用到，事实上Field不允许你那么设置，因为既不
    存储又不索引的域是没有意义的。
3.4 term
　　term是搜索的最小单位，它表示文档的一个词语，term由两部分组成：它表示的词语和这个词语所出现的field。
3.5 tocken
    tocken是term的一次出现，它包含trem文本和相应的起止偏移，以及一个类型字符串。一句话中可以出现多次相同的词语，它们都
    用同一个term表示，但是用不同的tocken，每个tocken标记该词语出现的地方。
3.6 segment
    添加索引时并不是每个document都马上添加到同一个索引文件，它们首先被写入到不同的小文件，然后再合并成一个大索引文件，
    这里每个小文件都是一个segment。
4 如何建索引
4.1 最简单的能完成索引的代码片断
IndexWriter writer = new IndexWriter(“/data/index/”, new StandardAnalyzer(), true);
Document doc = new Document();
doc.add(new Field("title", "lucene introduction", Field.Store.YES, Field.Index.TOKENIZED));
doc.add(new Field("content", "lucene works well", Field.Store.YES, Field.Index.TOKENIZED));
writer.addDocument(doc);
writer.optimize();
writer.close();
下面我们分析一下这段代码。
首先我们创建了一个writer，并指定存放索引的目录为“/data/index”，使用的分析器为StandardAnalyzer，第三个参数说明如果已经有
索引文件在索引目录下，我们将覆盖它们。然后我们新建一个document。
　　我们向document添加一个field，名字是“title”，内容是“lucene introduction”，对它进行存储并索引。再添加一个名字是
　　“content”的field，内容是“lucene works well”，也是存储并索引。
然后我们将这个文档添加到索引中，如果有多个文档，可以重复上面的操作，创建document并添加。
添加完所有document，我们对索引进行优化，优化主要是将多个segment合并到一个，有利于提高索引速度。
   随后将writer关闭，这点很重要。
   对，创建索引就这么简单！
  当然你可能修改上面的代码获得更具个性化的服务。
4.2 索引文本文件
    如果你想把纯文本文件索引起来，而不想自己将它们读入字符串创建field，你可以用下面的代码创建field：
Field field = new Field("content", new FileReader(file));
    这里的file就是该文本文件。该构造函数实际上是读去文件内容，并对其进行索引，但不存储。



======++++++++++++++++++=============== 例子 =============+++++++++++++++++++================================++++++===========

/** 
 * Lucene的演示Demo类 
 *  
 * **/  
public class CommonLuceneBasic {  
      
    /** 
     * 抽象的父类文件夹 
     * */  
    public static Directory directory;  
      /** 
       * 返回IndexWriter 
       * */  
      public static IndexWriter getWriter() throws Exception{  
          Analyzer analyzer=new StandardAnalyzer(Version.LUCENE_43);//设置标准分词器 ,默认是一元分词  
          IndexWriterConfig iwc=new IndexWriterConfig(Version.LUCENE_43, analyzer);//设置IndexWriterConfig  
         //  iwc.setRAMBufferSizeMB(3);//设置缓冲区大小  
          return new IndexWriter(directory,iwc);  
      }  
      /** 
       * @indexPath  索引存放路径 
       * **/  
      public static void add(String indexWriterPath){  
          IndexWriter writer=null;  
          try{  
         directory=FSDirectory.open(new File(indexWriterPath));//打开存放索引的路径  
         writer=getWriter();  
         Document doc=new Document();  
         doc.add(new StringField("id", "1", Store.YES));//存储  
         doc.add(new StringField("name", "张飞", Store.YES));//存储  
         doc.add(new StringField("content", "也许放弃,才能靠近你!", Store.YES));//存储  
         writer.addDocument(doc);//添加进写入流里  
         writer.forceMerge(1);//优化压缩段,大规模添加数据的时候建议，少使用本方法，会影响性能  
         writer.commit();//提交数据   
         System.out.println("添加成功");  
          }catch(Exception e){  
                
              e.printStackTrace();  
                
          }finally{  
                
              if(writer!=null){  
                  try{  
                  writer.close();//关闭流  
                  }catch(Exception e){  
                      e.printStackTrace();  
                  }  
              }  
                
                
          }  
            
            
      }  
        
      public static void main(String[] args) {  
        String path="E:\\临时索引";  
          add(path);//调用添加方法  
            
    }  
}  
